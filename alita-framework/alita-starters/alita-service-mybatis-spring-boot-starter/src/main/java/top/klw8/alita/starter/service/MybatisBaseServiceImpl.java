package top.klw8.alita.starter.service;

import com.baomidou.mybatisplus.core.toolkit.*;
import com.baomidou.mybatisplus.extension.service.additional.query.ChainQuery;
import com.baomidou.mybatisplus.extension.service.additional.query.impl.LambdaQueryChainWrapper;
import com.baomidou.mybatisplus.extension.service.additional.query.impl.QueryChainWrapper;
import com.baomidou.mybatisplus.extension.service.additional.update.ChainUpdate;
import com.baomidou.mybatisplus.extension.service.additional.update.impl.LambdaUpdateChainWrapper;
import com.baomidou.mybatisplus.extension.service.additional.update.impl.UpdateChainWrapper;
import org.apache.ibatis.binding.MapperMethod;
import top.klw8.alita.service.api.IMybatisBaseService;
import com.baomidou.mybatisplus.core.conditions.Wrapper;
import com.baomidou.mybatisplus.core.enums.SqlMethod;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.metadata.TableInfo;
import com.baomidou.mybatisplus.core.metadata.TableInfoHelper;
import com.baomidou.mybatisplus.extension.toolkit.SqlHelper;
import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.apache.ibatis.logging.Log;
import org.apache.ibatis.logging.LogFactory;
import org.apache.ibatis.session.SqlSession;
import org.mybatis.spring.SqlSessionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import top.klw8.alita.starter.service.common.ServiceContext;

/**
 * @author klw(213539 @ qq.com)
 * @ClassName: MybatisBaseServiceImpl
 * @Description: mybatis ÁöÑ base service ÂÆûÁé∞Ôºà Ê≥õÂûãÔºöM ÊòØ mapper ÂØπË±°ÔºåT ÊòØÂÆû‰ΩìÔºâ
 * @date 2019/8/10 9:55
 */
public class MybatisBaseServiceImpl<M extends BaseMapper<T>, T> implements IMybatisBaseService<T> {

    protected Log log = LogFactory.getLog(this.getClass());

    @Autowired
    protected M baseMapper;

    public MybatisBaseServiceImpl() {
    }

    /**
     * Ëé∑ÂèñÂØπÂ∫î entity ÁöÑ BaseMapper
     *
     * @return BaseMapper
     */
    protected M getBaseMapper() {
        return this.baseMapper;
    }

    /**
     * Âà§Êñ≠Êï∞ÊçÆÂ∫ìÊìç‰ΩúÊòØÂê¶ÊàêÂäü
     *
     * @param result Êï∞ÊçÆÂ∫ìÊìç‰ΩúËøîÂõûÂΩ±ÂìçÊù°Êï∞
     * @return boolean
     */
    protected boolean retBool(Integer result) {
        return SqlHelper.retBool(result);
    }

    protected Class<T> currentModelClass() {
        return (Class<T>) ReflectionKit.getSuperClassGenericType(this.getClass(), 1);
    }

    /**
     * ÊâπÈáèÊìç‰Ωú SqlSession
     */
    protected SqlSession sqlSessionBatch() {
        return SqlHelper.sqlSessionBatch(this.currentModelClass());
    }

    /**
     * ÈáäÊîæsqlSession
     *
     * @param sqlSession session
     */
    protected void closeSqlSession(SqlSession sqlSession) {
        SqlSessionUtils.closeSqlSession(sqlSession, GlobalConfigUtils.currentSessionFactory(this.currentModelClass()));
    }

    /**
     * Ëé∑Âèñ SqlStatement
     *
     * @param sqlMethod ignore
     * @return ignore
     */
    protected String sqlStatement(SqlMethod sqlMethod) {
        return SqlHelper.table(this.currentModelClass()).getSqlStatement(sqlMethod.getMethod());
    }

    @Override
    public CompletableFuture<Boolean> save(T entity) {
        return CompletableFuture.supplyAsync(() -> this.retBool(this.baseMapper.insert(entity)), ServiceContext.executor);
    }

    /**
     * ÊâπÈáèÊèíÂÖ•
     *
     * @param entityList ignore
     * @param batchSize ignore
     * @return ignore
     */
    @Transactional(rollbackFor = Exception.class)
    @Override
    public CompletableFuture<Boolean> saveBatch(Collection<T> entityList, int batchSize) {
        return CompletableFuture.supplyAsync(() -> {
            String sqlStatement = sqlStatement(SqlMethod.INSERT_ONE);
            try (SqlSession batchSqlSession = sqlSessionBatch()) {
                int i = 0;
                for (T anEntityList : entityList) {
                    batchSqlSession.insert(sqlStatement, anEntityList);
                    if (i >= 1 && i % batchSize == 0) {
                        batchSqlSession.flushStatements();
                    }
                    i++;
                }
                batchSqlSession.flushStatements();
            }
            return true;
        }, ServiceContext.executor);
    }

    /**
     * TableId Ê≥®Ëß£Â≠òÂú®Êõ¥Êñ∞ËÆ∞ÂΩïÔºåÂê¶ÊèíÂÖ•‰∏ÄÊù°ËÆ∞ÂΩï
     *
     * @param entity ÂÆû‰ΩìÂØπË±°
     * @return boolean
     */
    @Transactional(rollbackFor = Exception.class)
    @Override
    public CompletableFuture<Boolean> saveOrUpdate(T entity) {
        return CompletableFuture.supplyAsync(() -> {
            if (null != entity) {
                Class<?> cls = entity.getClass();
                TableInfo tableInfo = TableInfoHelper.getTableInfo(cls);
                Assert.notNull(tableInfo, "error: can not execute. because can not find cache of TableInfo for entity!");
                String keyProperty = tableInfo.getKeyProperty();
                Assert.notEmpty(keyProperty, "error: can not execute. because can not find column for id from entity!");
                Object idVal = ReflectionKit.getMethodValue(cls, entity, tableInfo.getKeyProperty());
                try {
                    return StringUtils.checkValNull(idVal) || Objects.isNull(getById((Serializable) idVal)) ? save(entity).get() : updateById(entity).get();
                } catch (InterruptedException | ExecutionException e) {
                    log.error("", e);
                }
            }
            return false;
        }, ServiceContext.executor);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public CompletableFuture<Boolean> saveOrUpdateBatch(Collection<T> entityList, int batchSize) {
        return CompletableFuture.supplyAsync(() -> {
            Assert.notEmpty(entityList, "error: entityList must not be empty");
            Class<?> cls = currentModelClass();
            TableInfo tableInfo = TableInfoHelper.getTableInfo(cls);
            Assert.notNull(tableInfo, "error: can not execute. because can not find cache of TableInfo for entity!");
            String keyProperty = tableInfo.getKeyProperty();
            Assert.notEmpty(keyProperty, "error: can not execute. because can not find column for id from entity!");
            try (SqlSession batchSqlSession = sqlSessionBatch()) {
                int i = 0;
                for (T entity : entityList) {
                    Object idVal = ReflectionKit.getMethodValue(cls, entity, keyProperty);
                    if (StringUtils.checkValNull(idVal) || Objects.isNull(getById((Serializable) idVal))) {
                        batchSqlSession.insert(sqlStatement(SqlMethod.INSERT_ONE), entity);
                    } else {
                        MapperMethod.ParamMap<T> param = new MapperMethod.ParamMap<>();
                        param.put(Constants.ENTITY, entity);
                        batchSqlSession.update(sqlStatement(SqlMethod.UPDATE_BY_ID), param);
                    }
                    // ‰∏çÁü•ÈÅì‰ª•Âêé‰ºö‰∏ç‰ºöÊúâ‰∫∫ËØ¥Êõ¥Êñ∞Â§±Ë¥•‰∫ÜËøòË¶ÅÊâßË°åÊèíÂÖ• üòÇüòÇüòÇ
                    if (i >= 1 && i % batchSize == 0) {
                        batchSqlSession.flushStatements();
                    }
                    i++;
                }
                batchSqlSession.flushStatements();
            }
            return true;
        }, ServiceContext.executor);
    }

    @Override
    public CompletableFuture<Boolean> removeById(Serializable id) {
        return CompletableFuture.supplyAsync(() -> SqlHelper.retBool(baseMapper.deleteById(id)), ServiceContext.executor);
    }

    @Override
    public CompletableFuture<Boolean> removeByMap(Map<String, Object> columnMap) {
        return CompletableFuture.supplyAsync(() -> {
            Assert.notEmpty(columnMap, "error: columnMap must not be empty");
            return SqlHelper.retBool(this.baseMapper.deleteByMap(columnMap));
        }, ServiceContext.executor);
    }

    @Override
    public CompletableFuture<Boolean> remove(Wrapper<T> wrapper) {
        return CompletableFuture.supplyAsync(() -> SqlHelper.retBool(this.baseMapper.delete(wrapper)), ServiceContext.executor);
    }

    @Override
    public CompletableFuture<Boolean> removeByIds(Collection<? extends Serializable> idList) {
        return CompletableFuture.supplyAsync(() -> SqlHelper.retBool(this.baseMapper.deleteBatchIds(idList)), ServiceContext.executor);
    }

    @Override
    public CompletableFuture<Boolean> updateById(T entity) {
        return CompletableFuture.supplyAsync(() -> this.retBool(this.baseMapper.updateById(entity)), ServiceContext.executor);
    }

    @Override
    public CompletableFuture<Boolean> update(T entity, Wrapper<T> updateWrapper) {
        return CompletableFuture.supplyAsync(() -> this.retBool(this.baseMapper.update(entity, updateWrapper)), ServiceContext.executor);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public CompletableFuture<Boolean> updateBatchById(Collection<T> entityList, int batchSize) {
        return CompletableFuture.supplyAsync(() -> {
            Assert.notEmpty(entityList, "error: entityList must not be empty");
            String sqlStatement = sqlStatement(SqlMethod.UPDATE_BY_ID);
            try (SqlSession batchSqlSession = sqlSessionBatch()) {
                int i = 0;
                for (T anEntityList : entityList) {
                    MapperMethod.ParamMap<T> param = new MapperMethod.ParamMap<>();
                    param.put(Constants.ENTITY, anEntityList);
                    batchSqlSession.update(sqlStatement, param);
                    if (i >= 1 && i % batchSize == 0) {
                        batchSqlSession.flushStatements();
                    }
                    i++;
                }
                batchSqlSession.flushStatements();
            }
            return true;
        }, ServiceContext.executor);
    }

    @Override
    public CompletableFuture<T> getById(Serializable id) {
        return CompletableFuture.supplyAsync(() -> this.baseMapper.selectById(id), ServiceContext.executor);
    }

    @Override
    public CompletableFuture<Collection<T>> listByIds(Collection<? extends Serializable> idList) {
        return CompletableFuture.supplyAsync(() -> this.baseMapper.selectBatchIds(idList), ServiceContext.executor);
    }

    @Override
    public CompletableFuture<Collection<T>> listByMap(Map<String, Object> columnMap) {
        return CompletableFuture.supplyAsync(() -> this.baseMapper.selectByMap(columnMap), ServiceContext.executor);
    }

    @Override
    public CompletableFuture<T> getOne(Wrapper<T> queryWrapper, boolean throwEx) {
        return CompletableFuture.supplyAsync(() -> throwEx ? this.baseMapper.selectOne(queryWrapper) : SqlHelper.getObject(this.log, this.baseMapper.selectList(queryWrapper)), ServiceContext.executor);
    }

    @Override
    public CompletableFuture<Map<String, Object>> getMap(Wrapper<T> queryWrapper) {
        return CompletableFuture.supplyAsync(() -> SqlHelper.getObject(this.log, this.baseMapper.selectMaps(queryWrapper)), ServiceContext.executor);
    }

    @Override
    public CompletableFuture<Integer> count(Wrapper<T> queryWrapper) {
        return CompletableFuture.supplyAsync(() -> SqlHelper.retCount(this.baseMapper.selectCount(queryWrapper)), ServiceContext.executor);
    }

    @Override
    public CompletableFuture<List<T>> list(Wrapper<T> queryWrapper) {
        return CompletableFuture.supplyAsync(() -> this.baseMapper.selectList(queryWrapper), ServiceContext.executor);
    }

    @Override
    public CompletableFuture<IPage<T>> page(IPage<T> page, Wrapper<T> queryWrapper) {
        return CompletableFuture.supplyAsync(() -> this.baseMapper.selectPage(page, queryWrapper), ServiceContext.executor);
    }

    @Override
    public CompletableFuture<List<Map<String, Object>>> listMaps(Wrapper<T> queryWrapper) {
        return CompletableFuture.supplyAsync(() -> this.baseMapper.selectMaps(queryWrapper), ServiceContext.executor);
    }

    @Override
    public <V> CompletableFuture<List<V>> listObjs(Wrapper<T> queryWrapper, Function<? super Object, V> mapper) {
        return CompletableFuture.supplyAsync(() -> (List) this.baseMapper.selectObjs(queryWrapper).stream().filter(Objects::nonNull).map(mapper).collect(Collectors.toList()), ServiceContext.executor);
    }

    @Override
    public CompletableFuture<IPage<Map<String, Object>>> pageMaps(IPage<T> page, Wrapper<T> queryWrapper) {
        return CompletableFuture.supplyAsync(() -> this.baseMapper.selectMapsPage(page, queryWrapper), ServiceContext.executor);
    }

    @Override
    public <V> CompletableFuture<V> getObj(Wrapper<T> queryWrapper, Function<? super Object, V> mapper) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                return SqlHelper.getObject(this.log, this.listObjs(queryWrapper, mapper).get());
            } catch (InterruptedException | ExecutionException e) {
                log.error("", e);
            }
            return null;
        }, ServiceContext.executor);
    }

    /**
     * ‰ª•‰∏ãÁöÑÊñπÊ≥ï‰ΩøÁî®‰ªãÁªç:
     *
     * ‰∏Ä. ÂêçÁß∞‰ªãÁªç
     * 1. ÊñπÊ≥ïÂêçÂ∏¶Êúâ query ÁöÑ‰∏∫ÂØπÊï∞ÊçÆÁöÑÊü•ËØ¢Êìç‰Ωú, ÊñπÊ≥ïÂêçÂ∏¶Êúâ update ÁöÑ‰∏∫ÂØπÊï∞ÊçÆÁöÑ‰øÆÊîπÊìç‰Ωú
     * 2. ÊñπÊ≥ïÂêçÂ∏¶Êúâ lambda ÁöÑ‰∏∫ÂÜÖÈÉ®ÊñπÊ≥ïÂÖ•ÂèÇ column ÊîØÊåÅÂáΩÊï∞ÂºèÁöÑ
     *
     * ‰∫å. ÊîØÊåÅ‰ªãÁªç
     * 1. ÊñπÊ≥ïÂêçÂ∏¶Êúâ query ÁöÑÊîØÊåÅ‰ª• {@link ChainQuery} ÂÜÖÈÉ®ÁöÑÊñπÊ≥ïÂêçÁªìÂ∞æËøõË°åÊï∞ÊçÆÊü•ËØ¢Êìç‰Ωú
     * 2. ÊñπÊ≥ïÂêçÂ∏¶Êúâ update ÁöÑÊîØÊåÅ‰ª• {@link ChainUpdate} ÂÜÖÈÉ®ÁöÑÊñπÊ≥ïÂêç‰∏∫ÁªìÂ∞æËøõË°åÊï∞ÊçÆ‰øÆÊîπÊìç‰Ωú
     *
     * ‰∏â. ‰ΩøÁî®Á§∫‰æã,Âè™Áî®‰∏çÂ∏¶ lambda ÁöÑÊñπÊ≥ïÂêÑÂ±ïÁ§∫‰∏Ä‰∏™‰æãÂ≠ê,ÂÖ∂‰ªñÁ±ªÊé®
     * 1. Ê†πÊçÆÊù°‰ª∂Ëé∑Âèñ‰∏ÄÊù°Êï∞ÊçÆ: `query().eq("column", value).one()`
     * 2. Ê†πÊçÆÊù°‰ª∂Âà†Èô§‰∏ÄÊù°Êï∞ÊçÆ: `update().eq("column", value).remove()`
     *
     */

    /**
     * ÈìæÂºèÊü•ËØ¢ ÊôÆÈÄö
     *
     * @return QueryWrapper ÁöÑÂåÖË£ÖÁ±ª
     */
    protected QueryChainWrapper<T> query() {
        return new QueryChainWrapper(this.getBaseMapper());
    }

    /**
     * ÈìæÂºèÊü•ËØ¢ lambda Âºè
     * <p>Ê≥®ÊÑèÔºö‰∏çÊîØÊåÅ Kotlin </p>
     *
     * @return LambdaQueryWrapper ÁöÑÂåÖË£ÖÁ±ª
     */
    protected LambdaQueryChainWrapper<T> lambdaQuery() {
        return new LambdaQueryChainWrapper(this.getBaseMapper());
    }

    /**
     * ÈìæÂºèÊõ¥Êîπ ÊôÆÈÄö
     *
     * @return UpdateWrapper ÁöÑÂåÖË£ÖÁ±ª
     */
    protected UpdateChainWrapper<T> update() {
        return new UpdateChainWrapper(this.getBaseMapper());
    }

    /**
     * ÈìæÂºèÊõ¥Êîπ lambda Âºè
     * <p>Ê≥®ÊÑèÔºö‰∏çÊîØÊåÅ Kotlin </p>
     *
     * @return LambdaUpdateWrapper ÁöÑÂåÖË£ÖÁ±ª
     */
    protected LambdaUpdateChainWrapper<T> lambdaUpdate() {
        return new LambdaUpdateChainWrapper(this.getBaseMapper());
    }

}
